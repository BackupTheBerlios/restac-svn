// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 

package de.fhg.fokus.restac.httpx.core.common;


public class HTTPStatus
{

    public HTTPStatus(int i, String s)
    {
        code = i;
        message = s;
    }

    public HTTPStatus(String s, String s1)
    {
        code = Integer.parseInt(s);
        message = s1;
    }

    public int getCode()
    {
        return code;
    }

    public void setCode(int i)
    {
        code = i;
    }

    public String getMessage()
    {
        return message;
    }

    public void setMessage(String s)
    {
        message = s;
    }

    public String getString()
    {
        return (new StringBuilder()).append(code).append(" ").append(message).toString();
    }

    public static final HTTPStatus CONTINUE;
    public static final HTTPStatus SWITCHING_PROTOCOL;
    public static final HTTPStatus OK;
    public static final HTTPStatus CREATED;
    public static final HTTPStatus ACCEPTED;
    public static final HTTPStatus NON_AUTHORATIVE;
    public static final HTTPStatus NO_CONTENT;
    public static final HTTPStatus RESET_CONTENT;
    public static final HTTPStatus PARTIAL_CONTENT;
    public static final HTTPStatus MULTIPLE_CHOICES;
    public static final HTTPStatus MOVED_PERM;
    public static final HTTPStatus FOUND;
    public static final HTTPStatus SEE_OTHER;
    public static final HTTPStatus NOT_MODIFIED;
    public static final HTTPStatus USE_PROXY;
    public static final HTTPStatus CODE_MONKEYS;
    public static final HTTPStatus TEMP_REDIRECT;
    public static final HTTPStatus BAD_REQUEST;
    public static final HTTPStatus UNAUTHORIZED;
    public static final HTTPStatus PAYMENT_REQUIRED;
    public static final HTTPStatus FORBIDDEN;
    public static final HTTPStatus NOT_FOUND;
    public static final HTTPStatus METHOD_NOT_ALLOWED;
    public static final HTTPStatus NOT_ACCEPTABLE;
    public static final HTTPStatus PROXY_AUTHENTICATION;
    public static final HTTPStatus REQUEST_TIMEOUT;
    public static final HTTPStatus CONFLICT;
    public static final HTTPStatus GONE;
    public static final HTTPStatus LENGTH_REQUIRED;
    public static final HTTPStatus PRECONDITION_FAILED;
    public static final HTTPStatus ENTITY_TOO_LARGE;
    public static final HTTPStatus URI_TOO_LONG;
    public static final HTTPStatus UNSUPPORTED_TYPE;
    public static final HTTPStatus RANGE_NOT_SATISFIABLE;
    public static final HTTPStatus EXPECTATION_FAILED;
    public static final HTTPStatus INTERNAL_ERROR;
    public static final HTTPStatus NOT_IMPLEMENTED;
    public static final HTTPStatus BAD_GATEWAY;
    public static final HTTPStatus SERVICE_UNAVAILABLE;
    public static final HTTPStatus GATEWAY_TIMEOUT;
    public static final HTTPStatus VERSION_NOT_SUPPORTED;
    public static final HTTPStatus ALL[];
    public static final HTTPStatus ALL_USED[];
    private int code;
    private String message;

    static 
    {
        CONTINUE = new HTTPStatus(100, "Continue");
        SWITCHING_PROTOCOL = new HTTPStatus(101, "Switching Protocol");
        OK = new HTTPStatus(200, "OK");
        CREATED = new HTTPStatus(201, "Created");
        ACCEPTED = new HTTPStatus(202, "Accepted");
        NON_AUTHORATIVE = new HTTPStatus(203, "Non-Authorative Information");
        NO_CONTENT = new HTTPStatus(204, "No Content");
        RESET_CONTENT = new HTTPStatus(205, "Reset Content");
        PARTIAL_CONTENT = new HTTPStatus(206, "Partial Content");
        MULTIPLE_CHOICES = new HTTPStatus(300, "Multiple Choices");
        MOVED_PERM = new HTTPStatus(301, "Moved Permanently");
        FOUND = new HTTPStatus(302, "Found");
        SEE_OTHER = new HTTPStatus(303, "See Other");
        NOT_MODIFIED = new HTTPStatus(304, "Not Modified");
        USE_PROXY = new HTTPStatus(305, "Use Proxy");
        CODE_MONKEYS = new HTTPStatus(306, "Code Monkeys");
        TEMP_REDIRECT = new HTTPStatus(307, "Temporary Redirect");
        BAD_REQUEST = new HTTPStatus(400, "Bad Request");
        UNAUTHORIZED = new HTTPStatus(401, "Unauthorized");
        PAYMENT_REQUIRED = new HTTPStatus(402, "Payment Required");
        FORBIDDEN = new HTTPStatus(403, "Forbidden");
        NOT_FOUND = new HTTPStatus(404, "Not Found");
        METHOD_NOT_ALLOWED = new HTTPStatus(405, "Method Not Allowed");
        NOT_ACCEPTABLE = new HTTPStatus(406, "Not Acceptable");
        PROXY_AUTHENTICATION = new HTTPStatus(407, "Proxy Authentication Required");
        REQUEST_TIMEOUT = new HTTPStatus(408, "Request Timeout");
        CONFLICT = new HTTPStatus(409, "Conflict");
        GONE = new HTTPStatus(410, "Gone");
        LENGTH_REQUIRED = new HTTPStatus(411, "Length Required");
        PRECONDITION_FAILED = new HTTPStatus(412, "Precondition Failed");
        ENTITY_TOO_LARGE = new HTTPStatus(413, "Request Entity Too Large");
        URI_TOO_LONG = new HTTPStatus(414, "Request-URI Too Long");
        UNSUPPORTED_TYPE = new HTTPStatus(415, "Unsupported Media Type");
        RANGE_NOT_SATISFIABLE = new HTTPStatus(416, "Requested Range Not Satisfiable");
        EXPECTATION_FAILED = new HTTPStatus(417, "Expectation Failed");
        INTERNAL_ERROR = new HTTPStatus(500, "Internal Server Error");
        NOT_IMPLEMENTED = new HTTPStatus(501, "Not Implemented");
        BAD_GATEWAY = new HTTPStatus(502, "Bad Gateway");
        SERVICE_UNAVAILABLE = new HTTPStatus(503, "Service Unavailable");
        GATEWAY_TIMEOUT = new HTTPStatus(504, "Gateway Timeout");
        VERSION_NOT_SUPPORTED = new HTTPStatus(505, "HTTP Version Not Supported");
        ALL = (new HTTPStatus[] {
            CONTINUE, SWITCHING_PROTOCOL, OK, CREATED, ACCEPTED, NON_AUTHORATIVE, NO_CONTENT, RESET_CONTENT, PARTIAL_CONTENT, MULTIPLE_CHOICES, 
            MOVED_PERM, FOUND, SEE_OTHER, NOT_MODIFIED, USE_PROXY, CODE_MONKEYS, TEMP_REDIRECT, BAD_REQUEST, UNAUTHORIZED, PAYMENT_REQUIRED, 
            FORBIDDEN, NOT_FOUND, METHOD_NOT_ALLOWED, NOT_ACCEPTABLE, PROXY_AUTHENTICATION, REQUEST_TIMEOUT, CONFLICT, GONE, LENGTH_REQUIRED, PRECONDITION_FAILED, 
            ENTITY_TOO_LARGE, URI_TOO_LONG, UNSUPPORTED_TYPE, RANGE_NOT_SATISFIABLE, EXPECTATION_FAILED, INTERNAL_ERROR, NOT_IMPLEMENTED, BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT, 
            VERSION_NOT_SUPPORTED
        });
        ALL_USED = (new HTTPStatus[] {
            FORBIDDEN, BAD_REQUEST, INTERNAL_ERROR, BAD_REQUEST, NOT_FOUND, MOVED_PERM, REQUEST_TIMEOUT, CONFLICT
        });
    }
}
